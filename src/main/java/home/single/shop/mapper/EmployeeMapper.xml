<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="home.single.shop.mapper.EmployeeMapper">
	
	<!-- 비밀번호 이력 등록 pwHistory -->
	<insert id="insertEmployeePwHistoryByAdd" parameterType="home.single.shop.vo.PwHistory">
		INSERT INTO pw_history (
			id
			, password
			, createdate
		) VALUES (
			#{id}
			, PASSWORD(#{password})
			, NOW()
		)
	</insert>
	
	<!-- 직원 정보 등록 employeeInfo -->
	<insert id="insertEmployeeInfo" parameterType="home.single.shop.vo.EmployeeInfo">
		INSERT INTO employee_info (
			employee_id
			, employee_name
			, employee_phone
			, employee_email
			, createdate
			, updatedate
		) VALUES (
			#{employeeId}
			, #{employeeName}
			, #{employeePhone}
			, #{employeeEmail}
			, NOW()
			, NOW()
		)
	</insert>
	
	<!-- 직원등록 employee -->
	<insert id="insertEmployee" parameterType="home.single.shop.vo.Employee">
		INSERT INTO employee (
			employee_id
			, employee_pw
			, employee_level
			, employee_state
			, createdate
			, updatedate
		) VALUES (
			#{employeeId}
			, PASSWORD(#{employeePw})
			, #{employeeLevel}
			, #{employeeState}
			, NOW()
			, NOW()
		)
	</insert>
	
	<!-- 통합아이디목록 등록 totalId -->
	<insert id="insertTotalIdByEmployee" parameterType="home.single.shop.vo.TotalId">
		INSERT INTO total_id (
			id
			, total_id_kind
			, createdate
		) VALUES (
			#{id}
			, #{totalIdKind}
			, CURDATE()
		)
	</insert>
	
	<!-- 비밀번호 재설정 -->
	<update id="updateEmployeePwByReset" parameterType="home.single.shop.vo.Employee">
		UPDATE employee
		SET employee_pw = PASSWORD(#{employeePw}), updatedate = NOW()
		WHERE employee_id = #{employeeId}
	</update>
	
	<!-- 이력 개수 3개이면 update -->
	<update id="updateEmployeePwHistoryByReset" parameterType="home.single.shop.vo.PwHistory">
		UPDATE pw_history
		SET 
			PASSWORD = PASSWORD(#{password}), createdate = NOW()
		WHERE 
			id = #{id} AND createdate = (SELECT MIN(createdate) FROM pw_history WHERE id = #{id})
	</update>
	
	<!-- 이력 개수 3개 밑이면 insert -->
	<insert id="insertEmployeePwHistoryByReset" parameterType="home.single.shop.vo.PwHistory">
		INSERT INTO pw_history (
			id
			, password
			, createdate
		) VALUES (
			#{id}
			, PASSWORD(#{password})
			, NOW()
		)
	</insert>
	
	<!-- pw_history count 조회 이력 개수 조회후 3개 밑이면 insert 3개이면 update -->
	<select id="selectPwHistoryCountByEmployee" parameterType="string" resultType="int">
		SELECT
			COUNT(*)
		FROM pw_history
		WHERE id = #{employeeId}
	</select>
	
	<!-- 직원 등록시 total_id 조회 ajax 요청으로 비동기 처리를 하여 조회시 웹페이지 새로고침 방지 -->
	<select id="selectTotalIdCkByEmployee" parameterType="string" resultType="string">
		SELECT
			id 
		FROM total_id 
		WHERE id = #{id}
	</select>
	
	<!-- 직원 비밀번호 재설정시 pw_history 조회 ajax요청으로 비동기처리를하여 조회시 웹페이지의 새로고침을 방지 -->
	<select id="selectPwHistoryCkByEmployee" parameterType="home.single.shop.vo.PwHistory" resultType="string">
		SELECT
			PASSWORD
		FROM pw_history 
		WHERE id = #{id} AND PASSWORD = PASSWORD(#{password})
	</select>
	
	<!-- 직원 계정 찾기 -->
	<select id="employeeIdFind" parameterType="home.single.shop.vo.EmployeeInfo" resultType="string">
		SELECT
			employee_id employeeId
		FROM employee_info
		WHERE employee_name = #{employeeName} AND employee_email = #{employeeEmail}
	</select>
	
	<!-- 직원 로그인 -->
	<select id="employeeLogin" parameterType="home.single.shop.vo.Employee" resultType="home.single.shop.vo.Employee">
		SELECT 
			employee_id employeeId
			, employee_level employeeLevel
			, employee_state employeeState
		FROM employee
		WHERE employee_id = #{employeeId} AND employee_pw = PASSWORD(#{employeePw})
	</select>	
</mapper>